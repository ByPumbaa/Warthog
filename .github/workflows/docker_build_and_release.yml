name: Docker Build and Release

on:
  push:
    branches:
      - master  # or the name of your default branch

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Get branch name
      id: get_branch_name
      run: |
        echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
    
    - name: Get version
      id: get_version
      run: |
        echo "VERSION=$(grep 'version :' meson.build | cut -d "'" -f 2)" >> $GITHUB_ENV

    - name: Get commit hash
      id: get_commit_hash
      run: |
        echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Check if commit is tagged with release
      id: check_tag
      run: |
        echo "IS_RELEASE=$(if git describe --exact-match --tags HEAD 2>/dev/null | grep -q '^release'; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_ENV
      
    - name : Meson Test
      run : DOCKER_BUILDKIT=1 docker build . --file MesonTestDockerfile --progress plain

    - name: Docker Build
      run: DOCKER_BUILDKIT=1 docker build . --output build

    - name: Docker Build Windows
      run: DOCKER_BUILDKIT=1 docker build . -f DockerfileWindows --output ./build/windows

    -name : Docker Build MacOS
      run : DOCKER_BUILDKIT=1 docker build . -f DockerfileMacOS --output ./build/macos

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ env.BRANCH_NAME }}-${{ env.VERSION }}-${{ env.COMMIT_HASH }}
          release_name: Release ${{ env.BRANCH_NAME }}-${{ env.VERSION }}-${{ github.run_number }}-${{ env.COMMIT_HASH }}
          body: |
            This is an automated pre-release of ${{ env.BRANCH_NAME }}-${{ env.VERSION }}-${{ env.COMMIT_HASH }} to see what are the changes in this release please check the commit history.
          prerelease: ${{ env.IS_RELEASE }}
    - name: Upload Linux Wallet
      id: upload-docker-build-output-wallet
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./build/wart-wallet
        asset_name: wart-wallet-linux
        asset_content_type: application/octet-stream

    - name: Upload Linux Node
      id: upload-docker-build-output-node
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./build/wart-node
        asset_name: wart-node-linux
        asset_content_type: application/octet-stream

#    - name: Upload Linux Miner
#      id: upload-docker-build-output-MINER
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} 
#        asset_path: ./build/wart-miner
#        asset_name: wart-miner-linux
#        asset_content_type: application/octet-stream
#
#    - name: Upload Windows Miner
#      id: upload-docker-build-output-MINER-windows
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} 
#        asset_path: ./build/windows/wart-miner.exe
#        asset_name: wart-miner-windows.exe
#        asset_content_type: application/octet-stream

    - name: Upload Windows Node
      id: upload-docker-build-output-node-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./build/windows/wart-node.exe
        asset_name: wart-node-windows.exe
        asset_content_type: application/octet-stream

    - name: Upload Windows Wallet
      id: upload-docker-build-output-wallet-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./build/windows/wart-wallet.exe
        asset_name: wart-wallet-windows.exe
        asset_content_type: application/octet-stream
    
    - name: Upload MacOS Node
      id: upload-docker-build-output-node-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./build/macos/wart-node.exe
        asset_name: wart-node-macos.exe
        asset_content_type: application/octet-stream

    - name: Upload MacOS Wallet
      id: upload-docker-build-output-wallet-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./build/macos/wart-wallet.exe
        asset_name: wart-wallet-macos.exe
        asset_content_type: application/octet-stream